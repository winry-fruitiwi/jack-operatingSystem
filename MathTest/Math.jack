// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
// Testing root: C:\Users\Winry\Dropbox\code\nand2tetris\winry\nand2tetris\tools\JackCompiler.bat

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    // a list of every power of 2 up to 16, done in two's complement
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        // initialize the list of every power of 2 up to 16
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = -16384 - 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    // finds the i'th bit of x
    function boolean bit(int x, int i) {
        // var int power, num;

        // // iterate backwards through twoToThe until the i'th index
        // let power = 15;
        // // copy of x
        // let num = x;

        // while (power > i) {
        //     // for every bit until the i'th index, if it is smaller than x, subtract it from x
        //     if (twoToThe[power] < num) { let num = num - twoToThe[power]; }
        //     let power = power - 1;
        // }
        // // if we are already at i, do the same check and return the result
        return twoToThe[i] & x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
    */
    function int multiply(int x, int y) {
        var int sum, shiftedX, counter;

        /** algorithm:
        sum = 0
        shiftedX = x
        for i = 0 ... w-1 (num of bits in y):
            if ((i'th bit of y) == 1):
                sum = sum + shiftedX
            shiftedX = shiftedX + shiftedX
        */

        // define sum and shiftedX variables, then find all bits in y and name
        // the resulting variable yBits
        let sum = 0;
        let shiftedX = x;
        let counter = 0;

        // iterate through the number of bits in y, which is in this case 16
        while (counter < 16) {
            // if the i'th bit of y is 1, then add shiftedX to the sum
            if (Math.bit(y, counter)) {
                let sum = sum + shiftedX;
            }

            // regardless of what happens, shift shiftedX to the right
            let shiftedX = shiftedX + shiftedX;

            let counter = counter + 1;
        }

        // then return the sum
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int argX, int argY) {
        /**
         recursive algorithm:
         if (y > x) return 0
         q = divide(x, 2*y)
         if ((x - 2*q*y) < y)
             return 2*q
 
         else
             return 2*q+1
 
         dividing negative numbers: use abs function
         overflow: just check y < 0
        */

        var int q, x, y;
        var int negativity;

        // check if: x is negative but y isn't or x isn't negative but y is
        if (((argX < 0) & ((argY > 0) | (argY = 0))) | ((argY < 0) & ((argX > 0) | (argX = 0)))) {
            let negativity = -1;
        } else {
            let negativity = 1;
        }

        let x = Math.abs(argX);
        let y = Math.abs(argY);

        if ((y > x) | (y+y < 0)) {
            return 0;
        }

        let q = Math.divide(x, y + y); // doesn't require multiplication

        if ((x - ((q*y)+(q*y))) < y) {

            return (q+q) * negativity;
        } else {
            
            return (q+q+1) * negativity;
        }
    }

    function int pow(int x, int power) {
        var int powCount;
        var int result;

        let result = 1;

        // iterate up to the power desired and execute repetitive multiplication
        while (powCount < power) {
            let result = result * x;

            let powCount = powCount + 1;
        }

        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        /**
         y = 0
         for j=n/2 - 1 ... 0 do:
             if (y + 2^j) * (y + 2^j) <= x then y = y + 2^j (multiply 2 j times)
         return y
        */
        var int j, y, result;

        let y = 0;
        let j = 15;

        while (j > -1) {
            let result = y + twoToThe[j];
            let result = result * result;

            if ((result < x) | (result = x) & (result > 0)) {
                let y = y + twoToThe[j];
            }

            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
