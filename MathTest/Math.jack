// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
// Testing root: C:\Users\Winry\Dropbox\code\nand2tetris\winry\nand2tetris\tools\JackCompiler.bat

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    // a list of every power of 2 up to 16, done in two's complement
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        // initialize the list of every power of 2 up to 16
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = -32767;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        return 0;
    }

    // finds the i'th bit of x
    function boolean bit(int x, int i) {
        var int power, num;

        // iterate backwards through twoToThe until the i'th index
        let power = 15;
        // copy of x
        let num = x;

        while (power < i) {
            // for every bit until the i'th index, if it is smaller than x, subtract it from x
            if (twoToThe[power] < num) { let num = num - twoToThe[power]; }
            let power = power - 1;
        }
        // if we are already at i, do the same check and return the result
        return (twoToThe[power] < num);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
    */
    function int multiply(int x, int y) {
        /** algorithm:
        sum = 0
        shiftedX = x
        for i = 0 ... w-1 (num of bits in y):
            if ((i'th bit of y) == 1):
                sum = sum + shiftedX
            shiftedX = shiftedX + shiftedX
        */

        // define sum and shiftedX variables, then find all bits in y and name
        // the resulting variable yBits

        // iterate through the number of bits in y, which is in this case 16

            // if the i'th bit of y is 1, then add shiftedX to the sum

            // regardless of what happens, shift shiftedX to the right

        // then return the sum
        return 1;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        return 2;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        return 3;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        return 4;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        return 5;
    }
}
