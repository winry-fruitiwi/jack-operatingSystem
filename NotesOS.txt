12:17 pm Monday, July 10, 2023
[1217]→	Unit 6.13: Project 12: Building the OS
OS is just an abstraction specified by the API
if we are a software developer learning to code, we are satisfied
however, we're part of Nand2Tetris and we will implement the OS!
VME has a built-in OS implementation in Java
nand2tetris/tools/os has another OS implementation in Jack, but it's been translated to VM to avoid giving away the solution
reverse engineering: you want to implement existing OS
	has lots of executable models and rely on each other (you have source code)
	to implement you should test each file on its own inside the other models and run them separately
how to test OS screen class?
	get the stub file: skeleton of all the non-API subroutines
	just review relevant material to implement
	given: stub file, test file. goal: implement functions in stub file, past test
	repeat for other classes
develop in any order!
final test: Pong! make copy, copy compiled VM files, execute directory



01:40 pm Monday, July 10, 2023
[1340]→	Unit 6.2: Efficiency Matters
focus on the math() library
efficiency REALLY matters. operations are used very widely
let's try multiplication
	x * y (or use Math.multiply)
	possible solution: repetitive solution. runtime: dominated by y
		well it can be shortened to the smaller number but doesn't matter
	algorithm is REALLY slow
	real algorithm: based on what you learn in elementary(?) school
	x = multiplicand
	y = multiplier
	for every bit in y, multiply the multiplicand by the bit (very simple)
	then add up all the results
	algorithm:
		sum = 0
		shiftedX = x
		for i = 0 ... w-1 (num of bits in y):
			if ((i'th bit of y) == 1):
				sum = sum + shiftedX
			shiftedX = shiftedX + shiftedX

		return sum

	This works for both software and hardware

we have now knocked out both efficiency matters and multiplication!


11:37 am Wednesday, July 26, 2023
[1137]→	multiply already done!
now ready for division
naive:
	count how many times we can subtract! proportional to x

good:
	what is largest number x=(100, 90, 80, ... 10) so that 3*x <= 175?
	answer must be at least 50 - accelerated subtraction
	get remainder
	repeat with one less 0
	get remainder
	if less than dividend, you're done
	long division is extremely short!

	recursive algorithm:
		if (y > x) return 0
		q = divide(2, 2*y)
		if ((x - 2*q*y) < y)
			return 2*q

		else
			return 2*q+1

		(but it requires multiplication! wah!)

		dividing negative numbers: use abs function
		overflow: just check y < 0
